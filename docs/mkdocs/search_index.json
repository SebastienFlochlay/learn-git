{
    "docs": [
        {
            "location": "/",
            "text": "Git\n\u00b6\n\n\nSyst\u00e8me de gestion de version d\u00e9centralis\u00e9 open source.\n\n\n\n\nD\u00e9finition\n\u00b6\n\n\nGestionnaire de version\n\u00b6\n\n\nUn gestionnaire de version (VCS - Version Control System) est un syst\u00e8me \nqui trace et enregistre l'\u00e9volution d'\u00e9l\u00e9ments au cours de vos d\u00e9veloppements.\nCe qui vous permet de revenir rapidement \u00e0 une version ant\u00e9rieure d'un fichier, \nde ramener le projet complet \u00e0 un \u00e9tat pr\u00e9c\u00e9dent, de visualiser les changements \nau cours du temps, de voir qui a modifi\u00e9 quelque chose qui pourrait causer un \nprobl\u00e8me, qui a introduit un probl\u00e8me et quand, et plus encore. \nUtiliser un VCS signifie aussi g\u00e9n\u00e9ralement que si vous vous trompez ou que \nvous perdez des fichiers, vous pouvez facilement revenir \u00e0 un \u00e9tat stable.\n\n\nInstallation de Git\n\u00b6\n\n\nPour l'installation de Git, vous trouverez tout le n\u00e9cessaire sur le site \ngit-scm.com\n. \nChoisissez votre plateforme et proc\u00e9dez \u00e0 l'installation.\n\n\nGit et son Param\u00e9trage\n\u00b6\n\n\nMaintenant que Git est install\u00e9, il est important de personnaliser votre environnement \nGit d\u00e9s \u00e0 pr\u00e9sent. Git contient un outil nomm\u00e9 \ngit config\n qui vous permet de configurer \nGit \u00e0 votre convenance. Pour information, ces variables de configuration peuvent \u00eatre \nstock\u00e9es dans trois endroits diff\u00e9rents :\n\n\n\n\n--system\n\n\n\n\nLe fichier \n/etc/gitconfig\n contient les valeurs pour tous les utilisateurs et tous les d\u00e9p\u00f4ts du syst\u00e8me. \nSi vous passez l\u2019option \n--system\n \u00e0 git config, il lit et \u00e9crit ce fichier sp\u00e9cifiquement.\n\n\n\n\n--global\n\n\n\n\nLe fichier \n~/.gitconfig\n est sp\u00e9cifique \u00e0 votre utilisateur. Vous pouvez forcer Git \u00e0 lire et \u00e9crire \nce fichier en passant l\u2019option \n--global\n.\n\n\n\n\n--local\n\n\n\n\nLe fichier config dans le r\u00e9pertoire Git (c\u2019est-\u00e0-dire \n.git/config\n ) du d\u00e9p\u00f4t en cours d\u2019utilisation est\nsp\u00e9cifique au seul d\u00e9p\u00f4t en cours. C'est le niveau par d\u00e9faut lorsque vous utilisez la commande \ngit config\n,\nmais vous pouvez bien s\u00fbr tout aussi bien utiliser l'option \n--local\n.\n\n\n\n\nNote\n\n\nChaque niveau surcharge le niveau pr\u00e9c\u00e9dent, donc les valeurs dans .git/config surchargent \ncelles de /etc/gitconfig.\n\n\n\n\nVotre identit\u00e9\n\u00b6\n\n\nLa premi\u00e8re chose \u00e0 faire apr\u00e8s l\u2019installation de Git est de renseigner votre nom et votre adresse mail. \nC\u2019est une information importante car toutes les validations dans Git utilisent cette information et elle est \nind\u00e9l\u00e9bile dans toutes les validations que vous pourrez r\u00e9aliser :\n\n\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n\n\n\n\nSi vous avez bien suivi Cette \u00e9tape n\u2019est n\u00e9cessaire qu\u2019une fois puisque vous passez l\u2019option \n--global\n. Si vous \nsouhaitez surcharger ces valeurs avec un nom ou une adresse mail diff\u00e9rents pour un projet sp\u00e9cifique, vous pouvez \nlancer ces commandes sans option \n--global\n lorsque vous \u00eates dans ce projet.\n\n\nVotre \u00e9diteur de texte\n\u00b6\n\n\n\u00c0 pr\u00e9sent que votre identit\u00e9 est renseign\u00e9e, vous pouvez configurer l\u2019\u00e9diteur de texte qui sera utilis\u00e9 quand Git \nvous demande de saisir un message. Par d\u00e9faut, Git utilise l\u2019\u00e9diteur configur\u00e9 au niveau syst\u00e8me, qui est \ng\u00e9n\u00e9ralement Vi ou Vim. Si vous souhaitez utiliser explicitement VIM vous pouvez entrer ce qui suit :\n\n\n$ git config --global core.editor vim\n\n\n\n\nVoici une liste r\u00e9capitulant quelques exemples d'\u00e9diteur de texte :\n\n\n\n\n\n\n\n\nEditeur\n\n\nCommande\n\n\n\n\n\n\n\n\n\n\nAtom\n\n\ngit config --global core.editor \"atom --wait\"\n\n\n\n\n\n\nemacs\n\n\ngit config --global core.editor \"emacs\"\n\n\n\n\n\n\nnano\n\n\ngit config --global core.editor \"nano -w\"\n\n\n\n\n\n\nvim\n\n\ngit config --global core.editor \"vim\"\n\n\n\n\n\n\nSublime Text (Mac)\n\n\ngit config --global core.editor \"subl -n -w\"\n\n\n\n\n\n\nSublime Text (Win, 32-bit install)\n\n\ngit config --global core.editor \"'c:/program files (x86)/sublime text 3/sublimetext.exe' -w\"\n\n\n\n\n\n\nSublime Text (Win, 64-bit install)\n\n\ngit config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n\n\n\n\n\n\nTextmate\n\n\ngit config --global core.editor \"mate -w\"\n\n\n\n\n\n\n\n\nLister vos param\u00e8tres\n\u00b6\n\n\nIl est bien s\u00fbr possible de v\u00e9rifier vos r\u00e9glages en listant vos param\u00e8tres via la commande suivante \ngit config --list\n :\n\n\n$ git config --list\nuser.name=John Doe\nuser.email=johndoe@example.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto\n\n\n\n\nVous pourrez observer certains param\u00e8tres appara\u00eetre plusieurs fois dans votre list, et c'est normal puisque Git liste \nles m\u00eames param\u00e8tres depuis plusieurs fichiers (/etc/gitconfig et ~/.gitconfig, par exemple). \nIl suffi de savoir que Git utilise la derni\u00e8re valeur pour chaque param\u00e8tre.\n\n\nEn cas de doute, vous pourrez v\u00e9rifier la v\u00e9ritable valeur d'un param\u00e8tre en sp\u00e9cifiant sont nom :\n\n\n$ git config user.name\nJohn Doe\n\n\n\n\nObtenir de l\u2019aide\n\u00b6\n\n\nEn cas de souci sur une commande, vous pouvez toujours jeter un \u0153il au manuel.\n\n\n$ git help <commande>\n$ git <commande> --help\n$ man git-<commande>",
            "title": "Home"
        },
        {
            "location": "/#git",
            "text": "Syst\u00e8me de gestion de version d\u00e9centralis\u00e9 open source.",
            "title": "Git"
        },
        {
            "location": "/#definition",
            "text": "",
            "title": "D\u00e9finition"
        },
        {
            "location": "/#gestionnaire-de-version",
            "text": "Un gestionnaire de version (VCS - Version Control System) est un syst\u00e8me \nqui trace et enregistre l'\u00e9volution d'\u00e9l\u00e9ments au cours de vos d\u00e9veloppements.\nCe qui vous permet de revenir rapidement \u00e0 une version ant\u00e9rieure d'un fichier, \nde ramener le projet complet \u00e0 un \u00e9tat pr\u00e9c\u00e9dent, de visualiser les changements \nau cours du temps, de voir qui a modifi\u00e9 quelque chose qui pourrait causer un \nprobl\u00e8me, qui a introduit un probl\u00e8me et quand, et plus encore. \nUtiliser un VCS signifie aussi g\u00e9n\u00e9ralement que si vous vous trompez ou que \nvous perdez des fichiers, vous pouvez facilement revenir \u00e0 un \u00e9tat stable.",
            "title": "Gestionnaire de version"
        },
        {
            "location": "/#installation-de-git",
            "text": "Pour l'installation de Git, vous trouverez tout le n\u00e9cessaire sur le site  git-scm.com . \nChoisissez votre plateforme et proc\u00e9dez \u00e0 l'installation.",
            "title": "Installation de Git"
        },
        {
            "location": "/#git-et-son-parametrage",
            "text": "Maintenant que Git est install\u00e9, il est important de personnaliser votre environnement \nGit d\u00e9s \u00e0 pr\u00e9sent. Git contient un outil nomm\u00e9  git config  qui vous permet de configurer \nGit \u00e0 votre convenance. Pour information, ces variables de configuration peuvent \u00eatre \nstock\u00e9es dans trois endroits diff\u00e9rents :   --system   Le fichier  /etc/gitconfig  contient les valeurs pour tous les utilisateurs et tous les d\u00e9p\u00f4ts du syst\u00e8me. \nSi vous passez l\u2019option  --system  \u00e0 git config, il lit et \u00e9crit ce fichier sp\u00e9cifiquement.   --global   Le fichier  ~/.gitconfig  est sp\u00e9cifique \u00e0 votre utilisateur. Vous pouvez forcer Git \u00e0 lire et \u00e9crire \nce fichier en passant l\u2019option  --global .   --local   Le fichier config dans le r\u00e9pertoire Git (c\u2019est-\u00e0-dire  .git/config  ) du d\u00e9p\u00f4t en cours d\u2019utilisation est\nsp\u00e9cifique au seul d\u00e9p\u00f4t en cours. C'est le niveau par d\u00e9faut lorsque vous utilisez la commande  git config ,\nmais vous pouvez bien s\u00fbr tout aussi bien utiliser l'option  --local .   Note  Chaque niveau surcharge le niveau pr\u00e9c\u00e9dent, donc les valeurs dans .git/config surchargent \ncelles de /etc/gitconfig.",
            "title": "Git et son Param\u00e9trage"
        },
        {
            "location": "/#votre-identite",
            "text": "La premi\u00e8re chose \u00e0 faire apr\u00e8s l\u2019installation de Git est de renseigner votre nom et votre adresse mail. \nC\u2019est une information importante car toutes les validations dans Git utilisent cette information et elle est \nind\u00e9l\u00e9bile dans toutes les validations que vous pourrez r\u00e9aliser :  $ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com  Si vous avez bien suivi Cette \u00e9tape n\u2019est n\u00e9cessaire qu\u2019une fois puisque vous passez l\u2019option  --global . Si vous \nsouhaitez surcharger ces valeurs avec un nom ou une adresse mail diff\u00e9rents pour un projet sp\u00e9cifique, vous pouvez \nlancer ces commandes sans option  --global  lorsque vous \u00eates dans ce projet.",
            "title": "Votre identit\u00e9"
        },
        {
            "location": "/#votre-editeur-de-texte",
            "text": "\u00c0 pr\u00e9sent que votre identit\u00e9 est renseign\u00e9e, vous pouvez configurer l\u2019\u00e9diteur de texte qui sera utilis\u00e9 quand Git \nvous demande de saisir un message. Par d\u00e9faut, Git utilise l\u2019\u00e9diteur configur\u00e9 au niveau syst\u00e8me, qui est \ng\u00e9n\u00e9ralement Vi ou Vim. Si vous souhaitez utiliser explicitement VIM vous pouvez entrer ce qui suit :  $ git config --global core.editor vim  Voici une liste r\u00e9capitulant quelques exemples d'\u00e9diteur de texte :     Editeur  Commande      Atom  git config --global core.editor \"atom --wait\"    emacs  git config --global core.editor \"emacs\"    nano  git config --global core.editor \"nano -w\"    vim  git config --global core.editor \"vim\"    Sublime Text (Mac)  git config --global core.editor \"subl -n -w\"    Sublime Text (Win, 32-bit install)  git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublimetext.exe' -w\"    Sublime Text (Win, 64-bit install)  git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"    Textmate  git config --global core.editor \"mate -w\"",
            "title": "Votre \u00e9diteur de texte"
        },
        {
            "location": "/#lister-vos-parametres",
            "text": "Il est bien s\u00fbr possible de v\u00e9rifier vos r\u00e9glages en listant vos param\u00e8tres via la commande suivante  git config --list  :  $ git config --list\nuser.name=John Doe\nuser.email=johndoe@example.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto  Vous pourrez observer certains param\u00e8tres appara\u00eetre plusieurs fois dans votre list, et c'est normal puisque Git liste \nles m\u00eames param\u00e8tres depuis plusieurs fichiers (/etc/gitconfig et ~/.gitconfig, par exemple). \nIl suffi de savoir que Git utilise la derni\u00e8re valeur pour chaque param\u00e8tre.  En cas de doute, vous pourrez v\u00e9rifier la v\u00e9ritable valeur d'un param\u00e8tre en sp\u00e9cifiant sont nom :  $ git config user.name\nJohn Doe",
            "title": "Lister vos param\u00e8tres"
        },
        {
            "location": "/#obtenir-de-laide",
            "text": "En cas de souci sur une commande, vous pouvez toujours jeter un \u0153il au manuel.  $ git help <commande>\n$ git <commande> --help\n$ man git-<commande>",
            "title": "Obtenir de l\u2019aide"
        },
        {
            "location": "/base/",
            "text": "Les bases de Git\n\u00b6\n\n\nInitialiser un d\u00e9pot\n\u00b6\n\n\nVous pouvez initialiser un d\u00e9pot de deux mani\u00e8res. La premi\u00e8re consiste \u00e0 prendre un projet ou un r\u00e9pertoire \nexistant et \u00e0 l\u2019importer dans Git. La seconde consiste \u00e0 cloner un d\u00e9p\u00f4t Git existant sur un autre serveur.\n\n\nInitialisation d\u2019un d\u00e9p\u00f4t Git dans un r\u00e9pertoire existant\n\u00b6\n\n\nSi vous commencez \u00e0 suivre un projet existant dans Git, vous n\u2019avez qu\u2019\u00e0 vous positionner dans le r\u00e9pertoire \ndu projet et saisir :\n\n\n$ git init\n\n\n\n\nCela cr\u00e9e un nouveau sous-r\u00e9pertoire nomm\u00e9 \n.git\n qui contient tous les fichiers n\u00e9cessaires au d\u00e9p\u00f4t. \n\n\nCloner un d\u00e9p\u00f4t existant\n\u00b6\n\n\nSi vous souhaitez obtenir une copie d\u2019un d\u00e9p\u00f4t Git existant, la commande dont vous avez besoin s\u2019appelle \ngit clone\n. \nIl est important de bien comprendre qu'avec cette commande, Git re\u00e7oit une copie de quasiment toutes les donn\u00e9es \ndont le serveur dispose. Toutes les versions de tous les fichiers pour l\u2019historique du projet sont t\u00e9l\u00e9charg\u00e9es \nquand vous lancez git clone.\n\n\n$ git clone https://github.com/Kotlin/kotlin-koans.git\n\n\n\n\nCeci cr\u00e9e un r\u00e9pertoire nomm\u00e9 \u201ckotlin-koans\u201d, initialise un r\u00e9pertoire .git \u00e0 l\u2019int\u00e9rieur, r\u00e9cup\u00e8re toutes les donn\u00e9es \nde ce d\u00e9p\u00f4t, et extrait une copie de travail de la derni\u00e8re version. Si vous souhaitez cloner le d\u00e9p\u00f4t dans un \nr\u00e9pertoire nomm\u00e9 diff\u00e9remment, vous pouvez sp\u00e9cifier le nom dans une option suppl\u00e9mentaire de la ligne de commande :\n\n\n$ git clone https://github.com/Kotlin/kotlin-koans.git my-kotlin-koans\n\n\n\n\nCette commande r\u00e9alise la m\u00eame chose que la pr\u00e9c\u00e9dente, mais le r\u00e9pertoire cible s\u2019appelle my-kotlin-koans.",
            "title": "Les bases de Git"
        },
        {
            "location": "/base/#les-bases-de-git",
            "text": "",
            "title": "Les bases de Git"
        },
        {
            "location": "/base/#initialiser-un-depot",
            "text": "Vous pouvez initialiser un d\u00e9pot de deux mani\u00e8res. La premi\u00e8re consiste \u00e0 prendre un projet ou un r\u00e9pertoire \nexistant et \u00e0 l\u2019importer dans Git. La seconde consiste \u00e0 cloner un d\u00e9p\u00f4t Git existant sur un autre serveur.",
            "title": "Initialiser un d\u00e9pot"
        },
        {
            "location": "/base/#initialisation-dun-depot-git-dans-un-repertoire-existant",
            "text": "Si vous commencez \u00e0 suivre un projet existant dans Git, vous n\u2019avez qu\u2019\u00e0 vous positionner dans le r\u00e9pertoire \ndu projet et saisir :  $ git init  Cela cr\u00e9e un nouveau sous-r\u00e9pertoire nomm\u00e9  .git  qui contient tous les fichiers n\u00e9cessaires au d\u00e9p\u00f4t.",
            "title": "Initialisation d\u2019un d\u00e9p\u00f4t Git dans un r\u00e9pertoire existant"
        },
        {
            "location": "/base/#cloner-un-depot-existant",
            "text": "Si vous souhaitez obtenir une copie d\u2019un d\u00e9p\u00f4t Git existant, la commande dont vous avez besoin s\u2019appelle  git clone . \nIl est important de bien comprendre qu'avec cette commande, Git re\u00e7oit une copie de quasiment toutes les donn\u00e9es \ndont le serveur dispose. Toutes les versions de tous les fichiers pour l\u2019historique du projet sont t\u00e9l\u00e9charg\u00e9es \nquand vous lancez git clone.  $ git clone https://github.com/Kotlin/kotlin-koans.git  Ceci cr\u00e9e un r\u00e9pertoire nomm\u00e9 \u201ckotlin-koans\u201d, initialise un r\u00e9pertoire .git \u00e0 l\u2019int\u00e9rieur, r\u00e9cup\u00e8re toutes les donn\u00e9es \nde ce d\u00e9p\u00f4t, et extrait une copie de travail de la derni\u00e8re version. Si vous souhaitez cloner le d\u00e9p\u00f4t dans un \nr\u00e9pertoire nomm\u00e9 diff\u00e9remment, vous pouvez sp\u00e9cifier le nom dans une option suppl\u00e9mentaire de la ligne de commande :  $ git clone https://github.com/Kotlin/kotlin-koans.git my-kotlin-koans  Cette commande r\u00e9alise la m\u00eame chose que la pr\u00e9c\u00e9dente, mais le r\u00e9pertoire cible s\u2019appelle my-kotlin-koans.",
            "title": "Cloner un d\u00e9p\u00f4t existant"
        },
        {
            "location": "/vim/",
            "text": "Vi IMproved\n\u00b6\n\n\nLe plus tricky des \u00e9diteurs de texte modal !\n\n\n\n\nOverview\n\u00b6\n\n\nVim\n est un \n\u00e9diteur de texte\n pour le terminal sous GNU/Linux. Directement inspir\u00e9\nde \nvi\n, il poss\u00e8de une stabilit\u00e9 exemplaire, une quantit\u00e9 de fonctions tr\u00e8s appr\u00e9ci\u00e9 \ndes d\u00e9veloppeurs (coloration syntaxique de 200 langages, compl\u00e9tion automatique, \ncomparaison de fichiers, recherche \u00e9volu\u00e9e) et est extensible par des scripts.\n\n\nCertes tr\u00e8s aust\u00e8re, c'est pourtant un outil v\u00e9ritablement tr\u00e8s puissant pour ceux \ncapables le dompter.\n\n\nPrincipe de base\n\u00b6\n\n\nPour \ncr\u00e9er ou modifier un fichier\n avec vim utilisez la commande suivante :\n\n\nvim my_file_path\n\n\n\n\nSi le fichier n'existe pas il sera cr\u00e9\u00e9 automatiquement.\n\n\n\n\nNote\n\n\nEt voil\u00e0, le fichier s'affiche et vous \u00eates dans le \nmode commande\n. Pour d\u00e9placer le curseur utilisez \nles fl\u00e8ches ou les touche \nH, J, K, L\n. C'est dans ce mode que vous pouvez entrer des commandes \npour agir sur le texte. \n\n\nAppuyez sur \ni\n pour acc\u00e9der au \nmode insertion\n ou \n\u00c9chap\n pour en sortir.\n\n\n\n\nCommandes de base\n\u00b6\n\n\n\n\n\n\n\n\nCommandes\n\n\nAction\n\n\n\n\n\n\n\n\n\n\ni\n\n\nPasser dans le mode insertion\n\n\n\n\n\n\nA\n\n\nAjouter en fin de ligne\n\n\n\n\n\n\n0 ou $\n\n\nSe d\u00e9placer en d\u00e9but ou fin de ligne\n\n\n\n\n\n\n:q\n\n\nQuitter\n\n\n\n\n\n\n:q!\n\n\nQuitter sans enregistrer\n\n\n\n\n\n\n:w\n\n\nEnregistrer le fichier\n\n\n\n\n\n\n:wq\n\n\nEnregistrer et quitter\n\n\n\n\n\n\n:x\n\n\nEnregistrer (seulement en cas de modification) et quitter\n\n\n\n\n\n\n:set paste\n\n\nPasser en mode \"collage\"\n\n\n\n\n\n\n\n\nCommandes d'\u00e9dition\n\u00b6\n\n\n\n\n\n\n\n\nCommandes\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nu\n\n\nAnnuler la derni\u00e8re op\u00e9ration\n\n\n\n\n\n\n<control>-r\n\n\nR\u00e9tablir la derni\u00e8re op\u00e9ration annul\u00e9e\n\n\n\n\n\n\n.\n\n\nR\u00e9p\u00e9ter la derni\u00e8re op\u00e9ration d'\u00e9dition\n\n\n\n\n\n\nyy\n\n\nCopier la ligne (\n4yy = 4 lignes\n)\n\n\n\n\n\n\ndd\n\n\nCouper la ligne (\n4dd = 4 lignes\n)\n\n\n\n\n\n\nd0 ou d$\n\n\nSupprimer le d\u00e9but ou la fin de la ligne\n\n\n\n\n\n\np\n\n\nColler apr\u00e8s (\nP = ins\u00e9rer avant\n)\n\n\n\n\n\n\nx\n\n\nEffacer le caract\u00e8re\n\n\n\n\n\n\ndw\n\n\nEffacer le texte jusqu'\u00e0 la fin du mot\n\n\n\n\n\n\ndiw\n\n\nEffacer le mot sous le curseur\n\n\n\n\n\n\nG\n\n\nSauter \u00e0 la ligne (\n7G pour la ligne n\u00b07\n), par d\u00e9faut le curseur sute \u00e0 la derni\u00e8re ligne\n\n\n\n\n\n\ngg\n\n\nSauter \u00e0 la premi\u00e8re ligne\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nTaper un nombre avant une commande vous permettra d'ex\u00e9cuter la commande plusieurs fois... \n\n\n\n\nRecherche / Remplacement\n\u00b6\n\n\n\n\n\n\n\n\nCommandes\n\n\nAction\n\n\n\n\n\n\n\n\n\n\n/\n\n\nRechercher du texte (\n?\n pour remonter dans le fichier\n)\n\n\n\n\n\n\nn\n\n\nRechercher l'occurence suivante\n\n\n\n\n\n\nN\n\n\nRechercher l'occurence pr\u00e9c\u00e9dente\n\n\n\n\n\n\ncw\n\n\nRemplacer le texte jusqu'\u00e0 la fin du mot\n\n\n\n\n\n\nciw\n\n\nRemplacer le mot\n\n\n\n\n\n\nC\n\n\nRemplacer jusqu'en fin de ligne\n\n\n\n\n\n\n.\n\n\nR\u00e9p\u00e9ter la derni\u00e8re op\u00e9ration d'\u00e9dition\n\n\n\n\n\n\n:s/ancien/nouveau/g\n\n\nRechercher et remplacer du texte \u00e0 la ligne o\u00f9 se trouve le curseur\n\n\n\n\n\n\n:%s/ancien/nouveau/g\n\n\nRechercher et remplacer du texte\n\n\n\n\n\n\n:r file_name\n\n\nIns\u00e9rer un fichier \u00e0 la position du curseur\n\n\n\n\n\n\n\n\nFen\u00eatrage\n\u00b6\n\n\n\n\n\n\n\n\nCommandes\n\n\nAction\n\n\n\n\n\n\n\n\n\n\n<control-w>-s ou :sp\n\n\nDiviser horizontalement\n\n\n\n\n\n\n<control-w>-v ou :vsp\n\n\nDiviser verticalement\n\n\n\n\n\n\n<control-w>-h/j/k/l\n\n\nPasser \u00e0 la fen\u00eatre suivante\n\n\n\n\n\n\n<control-w>-w\n\n\nPasser \u00e0 la fen\u00eatre suivante\n\n\n\n\n\n\n<control-w>-+\n\n\nAgrandit le viewport actuel\n\n\n\n\n\n\n<control-w>--\n\n\nR\u00e9duit  le viewport actuel\n\n\n\n\n\n\n<control-w>-=\n\n\nEgalise \u00e0 nouveau la taille des viewports.\n\n\n\n\n\n\n<control-w>-r\n\n\nEchange la position des viewports (\nR\n pour le sens inverse\n)\n\n\n\n\n\n\n<control-w>-n\n\n\nOuvrir un fichier vierge dans une nouvelle fen\u00eatre\n\n\n\n\n\n\n<control-w>-q\n\n\nFermer la fen\u00eatre\n\n\n\n\n\n\n\n\n\n\nGetting help\n\u00b6\n\n\nDocumentation Ubuntu\n\n\nDocumentation OpenClassrooms",
            "title": "Vim"
        },
        {
            "location": "/vim/#vi-improved",
            "text": "Le plus tricky des \u00e9diteurs de texte modal !",
            "title": "Vi IMproved"
        },
        {
            "location": "/vim/#overview",
            "text": "Vim  est un  \u00e9diteur de texte  pour le terminal sous GNU/Linux. Directement inspir\u00e9\nde  vi , il poss\u00e8de une stabilit\u00e9 exemplaire, une quantit\u00e9 de fonctions tr\u00e8s appr\u00e9ci\u00e9 \ndes d\u00e9veloppeurs (coloration syntaxique de 200 langages, compl\u00e9tion automatique, \ncomparaison de fichiers, recherche \u00e9volu\u00e9e) et est extensible par des scripts.  Certes tr\u00e8s aust\u00e8re, c'est pourtant un outil v\u00e9ritablement tr\u00e8s puissant pour ceux \ncapables le dompter.",
            "title": "Overview"
        },
        {
            "location": "/vim/#principe-de-base",
            "text": "Pour  cr\u00e9er ou modifier un fichier  avec vim utilisez la commande suivante :  vim my_file_path  Si le fichier n'existe pas il sera cr\u00e9\u00e9 automatiquement.   Note  Et voil\u00e0, le fichier s'affiche et vous \u00eates dans le  mode commande . Pour d\u00e9placer le curseur utilisez \nles fl\u00e8ches ou les touche  H, J, K, L . C'est dans ce mode que vous pouvez entrer des commandes \npour agir sur le texte.   Appuyez sur  i  pour acc\u00e9der au  mode insertion  ou  \u00c9chap  pour en sortir.",
            "title": "Principe de base"
        },
        {
            "location": "/vim/#commandes-de-base",
            "text": "Commandes  Action      i  Passer dans le mode insertion    A  Ajouter en fin de ligne    0 ou $  Se d\u00e9placer en d\u00e9but ou fin de ligne    :q  Quitter    :q!  Quitter sans enregistrer    :w  Enregistrer le fichier    :wq  Enregistrer et quitter    :x  Enregistrer (seulement en cas de modification) et quitter    :set paste  Passer en mode \"collage\"",
            "title": "Commandes de base"
        },
        {
            "location": "/vim/#commandes-dedition",
            "text": "Commandes  Action      u  Annuler la derni\u00e8re op\u00e9ration    <control>-r  R\u00e9tablir la derni\u00e8re op\u00e9ration annul\u00e9e    .  R\u00e9p\u00e9ter la derni\u00e8re op\u00e9ration d'\u00e9dition    yy  Copier la ligne ( 4yy = 4 lignes )    dd  Couper la ligne ( 4dd = 4 lignes )    d0 ou d$  Supprimer le d\u00e9but ou la fin de la ligne    p  Coller apr\u00e8s ( P = ins\u00e9rer avant )    x  Effacer le caract\u00e8re    dw  Effacer le texte jusqu'\u00e0 la fin du mot    diw  Effacer le mot sous le curseur    G  Sauter \u00e0 la ligne ( 7G pour la ligne n\u00b07 ), par d\u00e9faut le curseur sute \u00e0 la derni\u00e8re ligne    gg  Sauter \u00e0 la premi\u00e8re ligne      Note  Taper un nombre avant une commande vous permettra d'ex\u00e9cuter la commande plusieurs fois...",
            "title": "Commandes d'\u00e9dition"
        },
        {
            "location": "/vim/#recherche-remplacement",
            "text": "Commandes  Action      /  Rechercher du texte ( ?  pour remonter dans le fichier )    n  Rechercher l'occurence suivante    N  Rechercher l'occurence pr\u00e9c\u00e9dente    cw  Remplacer le texte jusqu'\u00e0 la fin du mot    ciw  Remplacer le mot    C  Remplacer jusqu'en fin de ligne    .  R\u00e9p\u00e9ter la derni\u00e8re op\u00e9ration d'\u00e9dition    :s/ancien/nouveau/g  Rechercher et remplacer du texte \u00e0 la ligne o\u00f9 se trouve le curseur    :%s/ancien/nouveau/g  Rechercher et remplacer du texte    :r file_name  Ins\u00e9rer un fichier \u00e0 la position du curseur",
            "title": "Recherche / Remplacement"
        },
        {
            "location": "/vim/#fenetrage",
            "text": "Commandes  Action      <control-w>-s ou :sp  Diviser horizontalement    <control-w>-v ou :vsp  Diviser verticalement    <control-w>-h/j/k/l  Passer \u00e0 la fen\u00eatre suivante    <control-w>-w  Passer \u00e0 la fen\u00eatre suivante    <control-w>-+  Agrandit le viewport actuel    <control-w>--  R\u00e9duit  le viewport actuel    <control-w>-=  Egalise \u00e0 nouveau la taille des viewports.    <control-w>-r  Echange la position des viewports ( R  pour le sens inverse )    <control-w>-n  Ouvrir un fichier vierge dans une nouvelle fen\u00eatre    <control-w>-q  Fermer la fen\u00eatre",
            "title": "Fen\u00eatrage"
        },
        {
            "location": "/vim/#getting-help",
            "text": "Documentation Ubuntu  Documentation OpenClassrooms",
            "title": "Getting help"
        },
        {
            "location": "/demo/",
            "text": "MkDocs\n\u00b6\n\n\nProject documentation with\u00a0Markdown.\n\n\n\n\nOverview\n\u00b6\n\n\nMkDocs is a \nfast\n, \nsimple\n and \ndownright gorgeous\n static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.\n\n\nHost anywhere\n\u00b6\n\n\nMkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or \nanywhere\n else you choose.\n\n\nGreat themes available\n\u00b6\n\n\nThere's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes: \nmkdocs\n and \nreadthedocs\n, select one of the 3rd\nparty themes in the \nMkDocs wiki\n, or \nbuild your own\n.\n\n\nPreview your site as you work\n\u00b6\n\n\nThe built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.\n\n\nEasy to customize\n\u00b6\n\n\nGet your project documentation looking just the way you want it by customizing\nthe theme.\n\n\n\n\nInstallation\n\u00b6\n\n\nInstall with a Package Manager\n\u00b6\n\n\nIf you have and use a package manager (such as \napt-get\n, \ndnf\n, \nhomebrew\n,\n\nyum\n, \nchocolatey\n, etc.) to install packages on your system, then you may\nwant to search for a \"MkDocs\" package and, if a recent version is available,\ninstall it with your package manager (check your system's documentation for\ndetails). That's it, you're done! Skip down to \nGetting Started\n.\n\n\nIf your package manager does not have a recent \"MkDocs\" package, you can still\nuse your package manager to install \"Python\" and \"pip\". Then you can use pip to\n\ninstall MkDocs\n.\n\n\nManual Installation\n\u00b6\n\n\nIn order to manually install MkDocs you'll need \nPython\n installed on your\nsystem, as well as the Python package manager, \npip\n. You can check if you have\nthese already installed from the command line:\n\n\n$ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2\n\n\n\n\nMkDocs supports Python versions 2.6, 2.7, 3.3, 3.4, 3.5 and pypy.\n\n\nInstalling Python\n\u00b6\n\n\nInstall \nPython\n by downloading an installer appropriate for your system from\n\npython.org\n and running it.\n\n\n\n\nNote\n\n\nIf you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n\n\n\n\n\nInstalling pip\n\u00b6\n\n\nIf you're using a recent version of Python, the Python package manager, \npip\n,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:\n\n\npip install --upgrade pip\n\n\n\n\nIf you need to install \npip\n for the first time, download \nget-pip.py\n.\nThen run the following command to install it:\n\n\npython get-pip.py\n\n\n\n\nInstalling MkDocs\n\u00b6\n\n\nInstall the \nmkdocs\n package using pip:\n\n\npip install mkdocs\n\n\n\n\nYou should now have the \nmkdocs\n command installed on your system. Run \nmkdocs\n--version\n to check that everything worked okay.\n\n\n$ mkdocs --version\nmkdocs, version 0.15.3\n\n\n\n\n\n\nNote\n\n\nIf you are using Windows, some of the above commands may not work\nout-of-the-box.\n\n\nA quick solution may be to preface every Python command with \npython -m\n\nlike this:\n\n\npython -m pip install mkdocs\npython -m mkdocs\n\n\n\nFor a more permanent solution, you may need to edit your \nPATH\n environment\nvariable to include the \nScripts\n directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example \nC:\\Python34\\\n), open the\n\nTools\n, then \nScripts\n folder, and run the \nwin_add2path.py\n file by double\nclicking on it. Alternatively, you can \ndownload\n the script and run it\n(\npython win_add2path.py\n).\n\n\n\n\n\n\nGetting Started\n\u00b6\n\n\nGetting started is super easy.\n\n\nmkdocs new my-project\ncd my-project\n\n\n\n\nTake a moment to review the initial project that has been created for you.\n\n\n\n\nThere's a single configuration file named \nmkdocs.yml\n, and a folder named\n\ndocs\n that will contain your documentation source files. Right now the \ndocs\n\nfolder just contains a single documentation page, named \nindex.md\n.\n\n\nMkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the \nmkdocs.yml\n\nconfiguration file, and then start the server by running the \nmkdocs serve\n\ncommand:\n\n\n$ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes\n\n\n\n\nOpen up \nhttp://127.0.0.1:8000/\n in your browser, and you'll see the default\nhome page being displayed:\n\n\n\n\nThe dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.\n\n\nOpen the \ndocs/index.md\n document in your text editor of choice, change the\ninitial heading to \nMkLorum\n, and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.\n\n\nNow try editing the configuration file: \nmkdocs.yml\n. Change the\n\nsite_name\n setting to \nMkLorum\n and save the file.\n\n\nsite_name: MkLorum\n\n\n\n\nYour browser should immediately reload, and you'll see your new site name take\neffect.\n\n\n\n\nAdding pages\n\u00b6\n\n\nNow add a second page to your documentation:\n\n\ncurl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md\n\n\n\n\nAs our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a \npages\n\nsetting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\n\n\n\n\nSave your changes and you'll now see a navigation bar with \nHome\n and \nAbout\n\nitems on the left as well as \nSearch\n, \nPrevious\n, and \nNext\n items on the\nright.\n\n\n\n\nTry the menu items and navigate back and forth between pages. Then click on\n\nSearch\n. A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!\n\n\n\n\nTheming our documentation\n\u00b6\n\n\nNow change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the \nmkdocs.yml\n file and add a \ntheme\n setting:\n\n\nsite_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs\n\n\n\n\nSave your changes, and you'll see the ReadTheDocs theme being used.\n\n\n\n\nChanging the Favicon Icon\n\u00b6\n\n\nBy default, MkDocs uses the \nMkDocs favicon\n icon. To use a different icon, create\nan \nimg\n subdirectory in your \ndocs_dir\n and copy your custom \nfavicon.ico\n file\nto that directory. MkDocs will automaticaly detect and use that file as your\nfavicon icon.\n\n\nBuilding the site\n\u00b6\n\n\nThat's looking good. You're ready to deploy the first pass of your \nMkLorum\n\ndocumentation. First build the documentation:\n\n\nmkdocs build\n\n\n\n\nThis will create a new directory, named \nsite\n. Take a look inside the\ndirectory:\n\n\n$ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml\n\n\n\n\nNotice that your source documentation has been output as two HTML files named\n\nindex.html\n and \nabout/index.html\n. You also have various other media that's\nbeen copied into the \nsite\n directory as part of the documentation theme. You\neven have a \nsitemap.xml\n file and \nmkdocs/search_index.json\n.\n\n\nIf you're using source code control such as \ngit\n you probably don't want to\ncheck your documentation builds into the repository. Add a line containing\n\nsite/\n to your \n.gitignore\n file.\n\n\necho \"site/\" >> .gitignore\n\n\n\n\nIf you're using another source code control tool you'll want to check it's\ndocumentation on how to ignore specific directories.\n\n\nAfter some time, files may be removed from the documentation but they will still\nreside in the \nsite\n directory. To remove those stale files, just run \nmkdocs\n\nwith the \n--clean\n switch.\n\n\nmkdocs build --clean\n\n\n\n\nOther Commands and Options\n\u00b6\n\n\nThere are various other commands and options available. For a complete list of\ncommands, use the \n--help\n flag:\n\n\nmkdocs --help\n\n\n\n\nTo view a list of options available on a given command, use the \n--help\n flag\nwith that command. For example, to get a list of all options available for the\n\nbuild\n command run the following:\n\n\nmkdocs build --help\n\n\n\n\nDeploying\n\u00b6\n\n\nThe documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere. \nGitHub project pages\n and \nAmazon\nS3\n may be good hosting options, depending upon your needs. Upload the contents\nof the entire \nsite\n directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the\n\nDeploying your Docs\n page.\n\n\nGetting help\n\u00b6\n\n\nTo get help with MkDocs, please use the \ndiscussion group\n, \nGitHub issues\n or\nthe MkDocs IRC channel \n#mkdocs\n on freenode.",
            "title": "Demo"
        },
        {
            "location": "/demo/#mkdocs",
            "text": "Project documentation with\u00a0Markdown.",
            "title": "MkDocs"
        },
        {
            "location": "/demo/#overview",
            "text": "MkDocs is a  fast ,  simple  and  downright gorgeous  static site\ngenerator that's geared towards building project documentation. Documentation\nsource files are written in Markdown, and configured with a single YAML\nconfiguration file.",
            "title": "Overview"
        },
        {
            "location": "/demo/#host-anywhere",
            "text": "MkDocs builds completely static HTML sites that you can host on GitHub pages,\nAmazon S3, or  anywhere  else you choose.",
            "title": "Host anywhere"
        },
        {
            "location": "/demo/#great-themes-available",
            "text": "There's a stack of good looking themes available for MkDocs. Choose between\nthe built in themes:  mkdocs  and  readthedocs , select one of the 3rd\nparty themes in the  MkDocs wiki , or  build your own .",
            "title": "Great themes available"
        },
        {
            "location": "/demo/#preview-your-site-as-you-work",
            "text": "The built-in dev-server allows you to preview your documentation as you're\nwriting it. It will even auto-reload and refresh your browser whenever you save\nyour changes.",
            "title": "Preview your site as you work"
        },
        {
            "location": "/demo/#easy-to-customize",
            "text": "Get your project documentation looking just the way you want it by customizing\nthe theme.",
            "title": "Easy to customize"
        },
        {
            "location": "/demo/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/demo/#install-with-a-package-manager",
            "text": "If you have and use a package manager (such as  apt-get ,  dnf ,  homebrew , yum ,  chocolatey , etc.) to install packages on your system, then you may\nwant to search for a \"MkDocs\" package and, if a recent version is available,\ninstall it with your package manager (check your system's documentation for\ndetails). That's it, you're done! Skip down to  Getting Started .  If your package manager does not have a recent \"MkDocs\" package, you can still\nuse your package manager to install \"Python\" and \"pip\". Then you can use pip to install MkDocs .",
            "title": "Install with a Package Manager"
        },
        {
            "location": "/demo/#manual-installation",
            "text": "In order to manually install MkDocs you'll need  Python  installed on your\nsystem, as well as the Python package manager,  pip . You can check if you have\nthese already installed from the command line:  $ python --version\nPython 2.7.2\n$ pip --version\npip 1.5.2  MkDocs supports Python versions 2.6, 2.7, 3.3, 3.4, 3.5 and pypy.",
            "title": "Manual Installation"
        },
        {
            "location": "/demo/#installing-python",
            "text": "Install  Python  by downloading an installer appropriate for your system from python.org  and running it.   Note  If you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).",
            "title": "Installing Python"
        },
        {
            "location": "/demo/#installing-pip",
            "text": "If you're using a recent version of Python, the Python package manager,  pip ,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:  pip install --upgrade pip  If you need to install  pip  for the first time, download  get-pip.py .\nThen run the following command to install it:  python get-pip.py",
            "title": "Installing pip"
        },
        {
            "location": "/demo/#installing-mkdocs",
            "text": "Install the  mkdocs  package using pip:  pip install mkdocs  You should now have the  mkdocs  command installed on your system. Run  mkdocs\n--version  to check that everything worked okay.  $ mkdocs --version\nmkdocs, version 0.15.3   Note  If you are using Windows, some of the above commands may not work\nout-of-the-box.  A quick solution may be to preface every Python command with  python -m \nlike this:  python -m pip install mkdocs\npython -m mkdocs  For a more permanent solution, you may need to edit your  PATH  environment\nvariable to include the  Scripts  directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example  C:\\Python34\\ ), open the Tools , then  Scripts  folder, and run the  win_add2path.py  file by double\nclicking on it. Alternatively, you can  download  the script and run it\n( python win_add2path.py ).",
            "title": "Installing MkDocs"
        },
        {
            "location": "/demo/#getting-started",
            "text": "Getting started is super easy.  mkdocs new my-project\ncd my-project  Take a moment to review the initial project that has been created for you.   There's a single configuration file named  mkdocs.yml , and a folder named docs  that will contain your documentation source files. Right now the  docs \nfolder just contains a single documentation page, named  index.md .  MkDocs comes with a built-in dev-server that lets you preview your documentation\nas you work on it. Make sure you're in the same directory as the  mkdocs.yml \nconfiguration file, and then start the server by running the  mkdocs serve \ncommand:  $ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\n[I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000\n[I 160402 15:50:43 handlers:58] Start watching changes\n[I 160402 15:50:43 handlers:60] Start detecting changes  Open up  http://127.0.0.1:8000/  in your browser, and you'll see the default\nhome page being displayed:   The dev-server also supports auto-reloading, and will rebuild your documentation\nwhenever anything in the configuration file, documentation directory, or theme\ndirectory changes.  Open the  docs/index.md  document in your text editor of choice, change the\ninitial heading to  MkLorum , and save your changes. Your browser will\nauto-reload and you should see your updated documentation immediately.  Now try editing the configuration file:  mkdocs.yml . Change the site_name  setting to  MkLorum  and save the file.  site_name: MkLorum  Your browser should immediately reload, and you'll see your new site name take\neffect.",
            "title": "Getting Started"
        },
        {
            "location": "/demo/#adding-pages",
            "text": "Now add a second page to your documentation:  curl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md  As our documentation site will include some navigation headers, you may want to\nedit the configuration file and add some information about the order, title, and\nnesting of each page in the navigation header by adding a  pages \nsetting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md  Save your changes and you'll now see a navigation bar with  Home  and  About \nitems on the left as well as  Search ,  Previous , and  Next  items on the\nright.   Try the menu items and navigate back and forth between pages. Then click on Search . A search dialog will appear, allowing you to search for any text on\nany page. Notice that the search results include every occurrence of the search\nterm on the site and links directly to the section of the page in which the\nsearch term appears. You get of all that with no effort or configuration on your\npart!",
            "title": "Adding pages"
        },
        {
            "location": "/demo/#theming-our-documentation",
            "text": "Now change the configuration file to alter how the documentation is displayed by\nchanging the theme. Edit the  mkdocs.yml  file and add a  theme  setting:  site_name: MkLorum\npages:\n    - Home: index.md\n    - About: about.md\ntheme: readthedocs  Save your changes, and you'll see the ReadTheDocs theme being used.",
            "title": "Theming our documentation"
        },
        {
            "location": "/demo/#changing-the-favicon-icon",
            "text": "By default, MkDocs uses the  MkDocs favicon  icon. To use a different icon, create\nan  img  subdirectory in your  docs_dir  and copy your custom  favicon.ico  file\nto that directory. MkDocs will automaticaly detect and use that file as your\nfavicon icon.",
            "title": "Changing the Favicon Icon"
        },
        {
            "location": "/demo/#building-the-site",
            "text": "That's looking good. You're ready to deploy the first pass of your  MkLorum \ndocumentation. First build the documentation:  mkdocs build  This will create a new directory, named  site . Take a look inside the\ndirectory:  $ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml  Notice that your source documentation has been output as two HTML files named index.html  and  about/index.html . You also have various other media that's\nbeen copied into the  site  directory as part of the documentation theme. You\neven have a  sitemap.xml  file and  mkdocs/search_index.json .  If you're using source code control such as  git  you probably don't want to\ncheck your documentation builds into the repository. Add a line containing site/  to your  .gitignore  file.  echo \"site/\" >> .gitignore  If you're using another source code control tool you'll want to check it's\ndocumentation on how to ignore specific directories.  After some time, files may be removed from the documentation but they will still\nreside in the  site  directory. To remove those stale files, just run  mkdocs \nwith the  --clean  switch.  mkdocs build --clean",
            "title": "Building the site"
        },
        {
            "location": "/demo/#other-commands-and-options",
            "text": "There are various other commands and options available. For a complete list of\ncommands, use the  --help  flag:  mkdocs --help  To view a list of options available on a given command, use the  --help  flag\nwith that command. For example, to get a list of all options available for the build  command run the following:  mkdocs build --help",
            "title": "Other Commands and Options"
        },
        {
            "location": "/demo/#deploying",
            "text": "The documentation site that you just built only uses static files so you'll be\nable to host it from pretty much anywhere.  GitHub project pages  and  Amazon\nS3  may be good hosting options, depending upon your needs. Upload the contents\nof the entire  site  directory to wherever you're hosting your website from and\nyou're done. For specific instructions on a number of common hosts, see the Deploying your Docs  page.",
            "title": "Deploying"
        },
        {
            "location": "/demo/#getting-help",
            "text": "To get help with MkDocs, please use the  discussion group ,  GitHub issues  or\nthe MkDocs IRC channel  #mkdocs  on freenode.",
            "title": "Getting help"
        }
    ]
}